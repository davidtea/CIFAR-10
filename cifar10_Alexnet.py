'''Using AlexNet on the CIFAR10 small images dataset. Using SGD

Code for VGGNet architecture from: https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3
Code for Cifar-10 preprocessing: https://github.com/fchollet/keras/blob/master/examples/cifar10_cnn.py

'''
from __future__ import print_function
import time
import matplotlib as mpl
mpl.use('Agg')    # Save graph to file
import matplotlib.pyplot as plt
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Flatten, Dense, Dropout, Activation
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
import cv2, numpy as np
import scipy


batch_size = 100
num_classes = 10
epochs = 50
data_augmentation = True

# input image dimensions
img_rows, img_cols = 32, 32
# The CIFAR10 images are RGB.
img_channels = 3

# The data, shuffled and split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()

model.add(Conv2D(64, 3, 11, 11, border_mode='full'))
model.add(BatchNormalization((64,226,226)))
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(3, 3)))

model.add(Conv2D(128, 64, 7, 7, border_mode='full'))
model.add(BatchNormalization((128,115,115)))
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(3, 3)))

model.add(Conv2D(192, 128, 3, 3, border_mode='full'))
model.add(BatchNormalization((128,112,112)))
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(3, 3)))

model.add(Conv2D(256, 192, 3, 3, border_mode='full'))
model.add(BatchNormalization((128,108,108)))
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(3, 3)))

model.add(Flatten())
model.add(Dense(12*12*256, 4096, init='normal'))
model.add(BatchNormalization(4096))
model.add(Activation('relu'))
model.add(Dense(4096, 4096, init='normal'))
model.add(BatchNormalization(4096))
model.add(Activation('relu'))
model.add(Dense(4096, 1000, init='normal'))
model.add(BatchNormalization(1000))
model.add(Activation('softmax'))

sgd = SGD(lr=0.0005, decay=1e-5, momentum=0.9, nesterov=True)
adam = keras.optimizers.Adam(lr=0.01)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

now = time.time()

resized_x_train = []
resized_x_test = []

# Normalize
#for i in range(len(x_train)):
for i in range(100):
    resized_x_train.append( scipy.misc.imresize(x_train[i], (224, 224)).astype('float32') )
#for i in range(len(x_test)):
for i in range(100):
    resized_x_test.append( scipy.misc.imresize(x_test[i], (224, 224)).astype('float32') )

print("Time Elapsed to resize:", time.time() - now)

'''
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
'''

x_train = np.asarray(resized_x_train)
x_test = np.asarray(resized_x_test)
x_train /= 255
x_test /= 255

datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)   # randomly flip images  

# Compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied).
datagen.fit(x_train)

print("History object being assigned!")
# Fit the model on the batches generated by datagen.flow().
hist = model.fit_generator(datagen.flow(x_train, y_train[:100], batch_size=batch_size), 
                           steps_per_epoch=x_train.shape[0] // batch_size,
                           epochs=epochs,
                           validation_data=(x_test, y_test[:100]))

#hist = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), shuffle=True)
print("Taking History Values!")
train_loss = hist.history['loss']
train_accuracy = hist.history['acc']
test_loss = hist.history['val_loss']
test_accuracy = hist.history['val_acc']
print(hist.history[-1])

fig = plt.figure(1)     
plt.plot(train_accuracy, 'r', test_accuracy, 'b')
plt.title('VGGNet Accuracy')
plt.ylabel('Train(Red) and Test(Blue) Accuracy')
plt.xlabel('Epochs')
fig.savefig('acc_graph.png', bbox_inches='tight')

fig = plt.figure(2)     
plt.plot(train_loss, 'r', test_loss, 'b')
plt.title('VGGNet Loss')
plt.ylabel('Train(Red) and Test(Blue) Loss')
plt.xlabel('Epochs')
fig.savefig('loss_graph.png', bbox_inches='tight')

